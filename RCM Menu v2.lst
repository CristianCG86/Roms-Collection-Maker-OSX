; --------------------------------------
; zasm: assemble "RCM Menu v2.asm"
; date: 2025-02-19 21:15:34
; --------------------------------------



; Multi-ROM Menu v1.1 for SCC mapper by Popolon-fr
;
; Thanks to GDX for their contribution

; --- Constantes ---
CHAR_SELECTOR	  EQU  3Eh	  ; Caracter de selección (0xCF)
SELECTOR_POS	  EQU  8	  ; Posición del selector
TS	  			  EQU  17h	  ; Línea de separación superior
TS_POS			  EQU  1	  ; Posición de la línea de separación superior
BS				  EQU  17h	  ; Línea de separación inferior
BS_POS			  EQU  22	  ; Posición de la línea de separación inferior
FREQ_POS		  EQU  23	  ; Posición de la frecuencia
LIST_VIEW_SIZE	  EQU  20	  ; Tamaño de la lista de ROMs
START_LIST		  EQU  2	  ; Inicio de la lista de ROMs

; Main-ROM entries

BASRVN		equ	0002Bh
DISSCR		equ	00041h
ENASCR		equ	00044h
ENASLT		equ	00024h
FILVRM		equ	00056h
INITXT		equ	0006Ch				; Initialize the screen 0
INIT32		equ	0006Fh				; Initialize the screen 1
GTSTCK		equ	000D5h
GTTRIG		equ	000D8h
LDIRVM		equ	0005Ch
MSXVER		equ	0002Dh
RSLREG		equ	00138h
VDP_DR		equ	00006h
VDP_DW		equ	00007h
WRSLT		equ	00014h
WRTVDP		equ	00047h 
WRTVRM		equ	0004Dh

; bios call to print a character on screen
CHPUT      equ 0x00a2        ; BIOS routine that sends to the screen the contents pointed by the A register
CHGMOD     equ 0x005f        ; BIOS routine that changes the screen mode to the value defined by A
CHGET      equ 0x009F        ; BIOS routine that waits for a key to be pressed
ERAFNK     equ 0x00CC        ; BIOS routine that sets the function keys as hidden
DSPFNK     equ 0x00CF        ; BIOS routine that sets the function keys as shown
FNKSB      equ 0x00C9        ; BIOS routine that changes the function keys between hidden and shown

; System variables

BAKCLR		equ	0F3EAh				; Background color (screen 1)
BDRCLR		equ	0F3EBh				; Border color
FORCLR		equ	0F3E9h				; Text color
LINL40		equ	0F3AEh				; Width
TXTATR		equ	0F3B9h				; Character attributs table 
NEWKEY		equ	0FBE5h
EXPTBL		equ	0FCC1h
RG9SAV		equ	0FFE8h				; Current value of the register 9
VOICAQ		equ	0F975h				; Data voice 1 (used as buffer here)

; Hooks

H_STKE	equ	0FEDAh

; Program variables


RamBottom	equ	0E000h
PrgInRam	equ	RamBottom+10h			; Address of the program in RAM
CurrTopName	equ	PrgInRam+(MainPrgEnd-RomSel)	; Address of the first name of the list to display
VramPos		equ	CurrTopName+2			; Vram address to display the list
SettingBits	equ	VramPos+2			; Setting bits after the selected ROM
SegMum		equ	SettingBits+1			; First segment number of the selected ROM
NextSegMum	equ	SegMum+1			; Segment number after the selected ROM
RomSlot		equ	NextSegMum+1			; Slot number
CurrAdr		equ	RomSlot+1			; Data address of the selected ROM
RomSize		equ	CurrAdr+2			; Rom size in number of the segment
WidthName	equ	40
LineData	equ	42

Offset		equ	1			; 0 Without offset register
							; 1 Offset register (Flash Rom SCC Cartridge popolon-fr)
							; 2 Offset register (MFR SCC+ SD)
	if	Offset==1
OffsetReg	equ	03FFFh
	elif	Offset==2
OffsetReg	equ	07FFDh
	endif

	org	04000h

; Rom header

	db	41h,42h
	dw	Start
	ds	12,0

; Menu program

Start:
	push	af
	push	bc
	push	de
	push	hl

	ld	hl,BankSel
	ld	de,VOICAQ
	ld	bc,RamPrgEnd-BankSel
	ldir						; Copy the segments selection routine

	ld	hl,RomSel
	ld	de,PrgInRam
	ld	bc,MainPrgEnd-RomSel
	ldir						; Copy the Rom pages selection routine

	call	RSLREG
	rrca
	rrca
	and	3
	ld	c,a
	ld	b,0
	ld	hl,EXPTBL
	add	hl,bc
	ld	a,(hl)
	and	80h
	or	c
	ld	c,a
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	a,(hl)
	and	0Ch
	or	c
	ld	(RomSlot),a				; Get the ROM slot number

	ld	hl,09000h
	ld	e,1
	call	WRSLT					; Select the segment 1 on the page 6000h-7FFFh

	ld	a,1
	ld	(07000h),a

	ld	a,1
	ld	(BAKCLR),a				; (Useless in screen 0)
	ld	(BDRCLR),a
	ld	a,15
	ld	(FORCLR),a				; Text color
	ld	a,WidthName
	ld	(LINL40),a				; Width 40
	call	INITXT				; Screen 0

	; Copiar la fuente a la dirección 0x0000 en la VRAM
    LD HL, Characters        ; Dirección de la fuente
    LD DE, 0x0800             ; Dirección en la VRAM
    LD BC, 768                ; 96 caracteres * 8 bytes
    CALL LDIRVM               ; Copiar a la VRAM

    ; Cambiar la tabla de caracteres en el VDP
    LD A, 2                 ; Registro 2 del VDP
    OUT (0x99), A           ; Selecciona el registro 2
    LD A, 0x08              ; Apuntar a la dirección 0x0800 (0x0800 / 0x800 = 0x08)
    OUT (0x99), A           ; Actualiza el VDP para usar la tabla en 0x0800

;-- Tests if one Game only to execute it directly

	ld	hl,RomList+45				; Point to the second MSX generation value
	cp	255
	jp	z,RomExec				; Jump if MSX generation value of the second line is 255

	ld	hl,RomList+3				; Point to the first MSX generation value
	ld	de,42
NextMSXgen:
	ld	a,(hl)
	and	3					; Reset unused bits of the MSX generation value
	add	hl,de
	ld	b,a
	ld	a,(MSXVER)
	and	3					; Reset unused bits of MSXVER
	cp	b
	jr	c,NextMSXgen				; Jump if MSXVER < A

	add	hl,de
	cp	255
	jp	z,RomExec				; Jump if MSX generation value of the next line is 255
;--

	ld	hl,(TXTATR)
	ld	de,WidthName*0
	add	hl,de
	ex	hl,de					; Set the position at the line 0

	ld	hl,Title
	ld	bc,WidthName
	call	LDIRVM					; Print the title

	ld	hl,SMXTeam
	ld	a,(MSXVER)

	or	a
	jr	z,CurrFreq				; Jump if MSX1

	ld	a,(RG9SAV)
	and	2
	ld	hl,F1_50Hz
	jr	z,CurrFreq				; Jump if 60hz mode
	ld	hl,F1_60Hz
CurrFreq:
	call	PrintFreqOpt				; Print the 50/60hz option

	ld	hl,RomList
	ld	(CurrTopName),hl

PrintTopSeparator:
	ld	hl,(TXTATR)
	ld	de,WidthName*TS_POS
	add	hl,de
	ex	hl,de					; Set the position at the line 0

	ld	hl,SeparatorTopLine
	ld	bc,WidthName
	call	LDIRVM					; Print the title

MainLoop:
	ld	hl,(TXTATR)
	ld	de,WidthName*START_LIST				; Set the list position at the line 4
	add	hl,de
	ld	(VramPos),hl

	halt
	call	PrintList				; Print the Roms list

	; -- Print separator bottom
	ld	hl,(TXTATR)
	ld	de,WidthName*BS_POS
	add	hl,de
	ex	hl,de					; Set the position at the line 0

	ld	hl,SeparatorBottomLine
	ld	bc,WidthName
	call	LDIRVM		

; Keyboard tests

	ld	a,(NEWKEY+8)				; Row 8
	and	40h
	call	z,MoveDown				; Call if Down key is pressed

	ld	a,(NEWKEY+8)				; Row 8
	and	20h
	call	z,MoveUp				; Call if Up key is pressed

	ld	a,(NEWKEY+8)				; Row 8
	and	1
	jr	z,RomExec				; Jump if Space key is pressed

	ld	a,(NEWKEY+6)				; Row 6
	and	20h
	call	z,FreqToggle				; Call if F1 key is pressed

; Joystick tests

	ld	a,1
	call	GTSTCK					; Test the joystick 1
	cp	1
	call	z,MoveUp				; Jump if Up is pressed

	ld	a,1
	call	GTSTCK					; Test the joystick 1
	cp	5
	call	z,MoveDown				; Jump if Down is pressed

	ld	a,1
	call	GTTRIG					; Test the button 1 of the joystick 1
	or	a
	jr	nz,RomExec				; Jump if button 1 of the joystick 1 is pressed

	ld	a,3
	call	GTTRIG					; Test the button 2 of the joystick 1
	or	a
	call	nz,FreqTogglJ				; Jump if button 2 of the joystick 1 is pressed			; Print the title
	jr	MainLoop

FreqTogglJ:
	ld	a,3
	call	GTTRIG					; Test the button 1 of the joystick 1
	or	a
	jr	nz,FreqTogglJ				; Jump if button 2 of the joystick 1 is pressed

	ld	a,1
	call	GTSTCK					; Test the joystick 1
	cp	3
	ret	nz					; Back if Left of the joystick 1 is not pressed

FreqToggle:
	ld	a,(MSXVER)
	or	a
	ret	z					; Back if MSX1

	ld	a,(NEWKEY+6)
	and	20h
	jr	z,FreqToggle				; Jump if F1 key is pressed

	ld	c,9
	ld	a,(RG9SAV)
	xor	2
	ld	b,a
	call	WRTVDP					; Toggle 50/60 Hz mode

	ld	a,(RG9SAV)
	and	2
	ld	hl,F1_50Hz
	jr	z,PrintFreqOpt				; Jump if 60hz mode
	ld	hl,F1_60Hz

PrintFreqOpt:
	push	hl
	ld	hl,(TXTATR)
	ld	de,WidthName*FREQ_POS
	add	hl,de
	ex	hl,de					; Set the position at the line 2
	pop	hl
	ld	bc,WidthName
	jp	LDIRVM					; Print the 50/60hz option

RomExec:
	ld	a,(SegMum)
	ld	(RamBottom+15),a			; Temporary SegMum
	ld	(VOICAQ+(RamPrgEnd-BankSel)),a
	ld	c,a
	ld	a,(NextSegMum)
	sub	c					; Calculate the Rom size
	ld	(RomSize),a

	pop	hl
	pop	de
	pop	bc
	pop	af
	jp	PrgInRam				; Go to the Rom execution program in RAM (RomSel)

MoveDown:
	ld	hl,(CurrAdr)
	inc	hl
	ld	a,(hl)					; Get the MSX generation data
	and	3
	ld	b,a					; Store MSX generation value in B
	bit	7,(hl)
	jr	z,NextName				; Jump if last Rom bit is reset
	ld	a,(MSXVER)
	and	3					; Reset unused bits of MSX generation
	cp	b
	ret	c					; Last line?

CONT:
	ld	de,LineData
	add	hl,de
	ld	a,(hl)					; Get the nMSX generation data
	cp	255
	ret	z

NextName:
	ld	hl,(CurrTopName)
	ld	de,LineData
	add	hl,de
	ld	(CurrTopName),hl			; Set the new current name position
	ret

MoveUp:
	ld	hl,(CurrTopName)
	ld	de,LineData*5
	add	hl,de
	ld	a,(hl)
	or	a
	ret	z					; Back if next ROM segment is 0 (No ROM) 

PrevName:
	ld	hl,(CurrTopName)
	ld	de,LineData
	or	a
	sbc	hl,de
	ld	(CurrTopName),hl			; Set the new current name position
	ret

PrintList:
	ld	b,LIST_VIEW_SIZE					; 20 lines to display
	ld	hl,(CurrTopName)			; HL = Current Top name address

PrintListLP:
	push	bc
	inc	hl					; Points the MSX generation
PrnCond:
	ld	a,(hl)
	and	3					; to keep the bits 0-1
	ld	c,a
	ld	a,(MSXVER)
	cp	c
	jr	nc,PrintOK				; Call if A >= c

	ld	de,LineData
	add	hl,de					; Go to the next name

	jr	PrnCond
PrintOK:
	ld	e,(hl)					; Get the settings bits (Mirror and Boot)
	dec	hl					; Points the Segment number
	pop	bc
	push	bc
	ld	a,LIST_VIEW_SIZE-6
	cp	b
	jr	nz,SkipSegMum
	ld	a,e
	ld	(SettingBits),a				; Store the settings bits at the cursor
	ld	a,(hl)					; Get the Segment number at the cursor
	ld	(SegMum),a				; Store the Segment number at the cursor
	ld	(CurrAdr),hl
	ld	de,LineData
	add	hl,de
	ld	a,(hl)					; Get the next Segment number
	ld	(NextSegMum),a				; Store the next Segment number
	ld	hl,(CurrAdr)
SkipSegMum:
	ld	de,LineData-WidthName
	add	hl,de					; Points the current name
	ld	de,(VramPos)
	ld	bc,WidthName
	push	hl
	call	LDIRVM					; Print a name

	ld	hl,(VramPos)
	ld	de,WidthName
	add	hl,de
	ld	(VramPos),hl				; Go to the line

	pop	hl
	ld	de,WidthName
	add	hl,de					; Go to le next name

	pop	bc
	djnz	PrintListLP

	ld	hl,(TXTATR)
	ld	de,WidthName*SELECTOR_POS + 3
	add	hl,de
	ld	a,CHAR_SELECTOR
	call	WRTVRM					; Print the selection cursor to line 10

	halt
	halt
	halt
	halt
	ret

PrintName:
	pop	hl
	inc	hl
	ld	bc,WidthName*START_LIST
	call	LDIRVM					; Print the current name
	pop	hl
	ret

SetVDPReg:
    LD A, 2              ; Registro 2 del VDP
    OUT (0x99), A        ; Selecciona el registro 2 del VDP
    LD A, 0x08           ; Apunta a la tabla de caracteres en 0x0800
    OUT (0x99), A        ; Escribe el valor en el registro
    RET

RomSel:
	push	bc
	push	de

	ld	a,(BASRVN+1)
	bit	4,a
	jr	nz,NoScreen1				; Jump if initial screen mode is screen 0
	ld	a,1
	push	hl
	call	INIT32
	pop	hl
NoScreen1:
	ld	a,(RomSize)
	cp	5
	jp	z,PrgInRam+(Rom2pages1_2_3-RomSel)	; Jump if Romsize == 40K (jr Rom2pages1_2_3)
	cp	6
	jp	z,PrgInRam+(Rom2pages1_2_3-RomSel)	; Jump if Romsize == 48K (jr Rom2pages1_2_3)
	cp	4
	jp	nc,PrgInRam+(Rom2pages1_2-RomSel)	; Jump if Romsize >= 32K (jr Rom2pages1_2)

PlainRom8to16K:

; Initialise the Rom mapper segments and pages for 4/8/16kB Roms

	ld	a,(RamBottom+15)
	ld	(05000h),a				; Select the segment 0 on the page 4000h-5FFFh

	ld	a,(04003h)
	bit	7,a
	jp	nz,PrgInRam+(Rom2page2-RomSel)		; Jump if INIT address > 7FFFh
	ld	a,(04009h)
	bit	7,a
	jp	nz,PrgInRam+(Rom2page2-RomSel)		; Jump if TEXT address > 7FFFh
	ld	a,(04003h)
	bit	6,a
	jp	z,PrgInRam+(Rom2page0-RomSel)		; Jump if INIT address < 4000h

Rom2page1:
	ld	a,(RamBottom+15)
	ld	(05000h),a				; Select the segment 0 on the page 4000h-5FFFh
	inc	a
	ld	(07000h),a				; Select the segment 1 on the page 6000h-7FFFh
	ld	e,1
	ld	hl,09000h
	call	WRSLT					; Select the empty segment on the page 8000h-9FFFh
	ld	e,1
	ld	hl,0B000h
	call	WRSLT					; Select the empty segment on the page A000h-BFFFh
	pop	de
	pop	bc
	ld	hl,(04002h)
	jp	PrgInRam+(ExeByJump-RomSel)		; Execute the selected Rom with INIT address between 4000h and 7FFFh

; 32kB Rom execution on page 4000h

Rom2pages1_2:
	ld	a,(RamBottom+15)

	if	Offset==2
	ld	e,0
	ld	a,(RomSlot)
	ld	hl,OffsetReg+1
	call	WRSLT					; Sets up the offset segment
	endif

	if	Offset==1
	ld	e,a
	ld	a,(RomSlot)
	ld	hl,OffsetReg
	call	WRSLT					; Sets up the offset segment
	xor	a
	endif

	ld	(05000h),a				; Select the segment 0 on the page 4000h-5FFFh
	inc	a
	ld	(07000h),a				; Select the segment 1 on the page 6000h-7FFFh
	ld	e,a
	ld	a,(RomSlot)
	inc	e
	ld	hl,09000h
	call	WRSLT					; Select the segment 2 on the page 8000h-9FFFh
	ld	a,(RomSlot)
	inc	e
	ld	hl,0B000h
	call	WRSLT					; Select the segment 3 on the page A000h-BFFFh
	pop	af

	ld	hl,(4002h)
	push	hl
	bit	7,h
	jr	z,NoUPTO8000

	ld	a,(EXPTBL)
	ld	h,040h
	call	ENASLT					; Select the Main-ROM on the page 4000h-7fffh
	ld	a,(RomSlot)
	ld	h,080h
	call	ENASLT					; Select the ROM on the page 8000h-Bfffh
NoUPTO8000:
	pop	hl
	pop	de
	pop	bc
	jp	PrgInRam+(ExeByJump-RomSel)		; Execute the selected Rom with INIT address between 4000h and 7FFFh

; 32Kb Rom execution on page 8000h

Rom2page2:
	ld	a,1
	ld	(05000h),a				; Select the empty segment on the page 4000h-5FFFh
	ld	(07000h),a				; Select the empty segment on the page 6000h-7FFFh

	push	hl
	ld	a,(RamBottom+15)
	ld	e,a
	ld	a,(RomSlot)
	ld	hl,09000h
	call	WRSLT					; Select the segment 0 on the page 8000h-9FFFh
	ld	a,(RomSlot)
	inc	e
	ld	hl,0B000h
	call	WRSLT					; Select the segment 1 on the page A000h-BFFFh
	pop	hl
	pop	de
	pop	bc
	jp	PrgInRam+(ExeByRet-RomSel)		; Back to Rom scaning

; 16Kb Rom execution on page 0000h

Rom2page0:
	ld	a,1
	ld	(05000h),a				; Select the empty segment on the page 4000h-5FFFh
	ld	(07000h),a				; Select the empty segment on the page 6000h-7FFFh

	push	hl
	ld	a,(RamBottom+15)
	ld	e,a
	ld	a,(RomSlot)
	ld	hl,09000h
	call	WRSLT					; Select the segment 0 on the page 8000h-9FFFh
	ld	a,(RomSlot)
	inc	e
	ld	hl,0B000h
	call	WRSLT					; Select the segment 1 on the page A000h-BFFFh
	pop	hl
	pop	de
	pop	bc
	jp	PrgInRam+(ExeByRet-RomSel)		; Back to Rom scaning

; 48Kb Rom execution

Rom2pages1_2_3:
	ld	a,(RamBottom+15)
	ld	(05000h),a				; Select the segment 2 on the page 4000h-5FFFh
	ld	a,(04000h)
	cp	41h
	jp	nz,PrgInRam+(PutOnpages1_2_3-RomSel)	; Jump to PutOnpages1_2_3 if no header on the first segment
	ld	a,(04001h)
	cp	42h
	jp	z,PrgInRam+(Rom2pages1_2-RomSel)	; Jump to Rom2pages1_2 if Header on the first segment

PutOnpages1_2_3:
	ld	a,(RamBottom+15)
	add	a,4
	ld	(05000h),a				; Select the segment 4 on the page 4000h-5FFFh
	inc	a
	ld	(07000h),a				; Select the segment 5 on the page 6000h-7FFFh

	ld	hl,4000h
	ld	de,8000h
	ld	bc,4000h
	ldir

	sub	2
	ld	(07000h),a				; Select the segment 3 on the page 6000h-7FFFh
	dec	a
	ld	(05000h),a				; Select the segment 2 on the page 4000h-5FFFh

	ld	a,(RamBottom+15)
	ld	e,a
	ld	a,(RomSlot)
	ld	hl,09000h
	call	WRSLT					; Select the segment 0 on the page 8000h-9FFFh
	ld	a,(RomSlot)
	inc	e
	ld	hl,0B000h
	call	WRSLT					; Select the segment 1 on the page A000h-BFFFh

	pop	de
	pop	bc
	ld	hl,(4002h)
;	jp	(hl)					; Execute the selected Rom with INIT address between 4000h and 7FFFh

ExeByJump:
	ld	a,(SettingBits)
	and	020h					; Boot type
	jp	nz,0					; Bios reboot
	jp	(hl)					; Execute the selected Rom

ExeByRet:
	ld	a,(SettingBits)
	and	020h					; Boot type
	ret	nz					; Back to Rom scaning
	rst	0					; Bios reboot

MainPrgEnd:

; These routines have a fixed size and are placed in the music buffer area of channel.
; A patched Megarom calls its routines to change memory pages.

BankSel:

Bk5000:							; F975h Bank 0 8KB
	push	af
	push	hl
	if	Offset==0
	ld	hl,VOICAQ+(RamPrgEnd-BankSel)
	add	a,(hl)
	endif
	ld	(05000h),a
	pop	hl
	pop	af
	ret
	if	Offset
	ds	4,0
	endif
Bk7000:							; F981h Bank 1 8KB
	push	af
	push	hl
	if	Offset==0
	ld	hl,VOICAQ+(RamPrgEnd-BankSel)
	add	a,(hl)
	endif
	ld	(07000h),a
	pop	hl
	pop	af
	ret
	if	Offset
	ds	4,0
	endif
Bk9000:							; F98Dh Bank 2 8KB
	push	af
	push	hl
	if	Offset==0
	ld	hl,VOICAQ+(RamPrgEnd-BankSel)
	add	a,(hl)
	endif
	ld	(09000h),a
	pop	hl
	pop	af
	ret
	if	Offset
	ds	4,0
	endif
BkB000:							; F999h Bank 3 8KB
	push	af
	push	hl
	if	Offset==0
	ld	hl,VOICAQ+(RamPrgEnd-BankSel)
	add	a,(hl)
	endif
	ld	(0B000h),a
	pop	hl
	pop	af
	ret
	if	Offset
	ds	4,0
	endif
AD6000:							; F9A5h Bank 0 16KB
	push	af
	add	a,a
	if	Offset==0
	ld	hl,VOICAQ+(RamPrgEnd-BankSel)
	add	a,(hl)
	endif
	ld	(05000h),a
	inc	a
	ld	(07000h),a
	pop	af
	ret
	if	Offset
	ds	4,0
	endif
AD7000:							; F9B4h Bank 1 16KB
	push	af
	add	a,a
	if	Offset==0
	ld	hl,VOICAQ+(RamPrgEnd-BankSel)
	add	a,(hl)
	endif
	ld	(09000h),a
	inc	a
	ld	(0B000h),a
	pop	af
	ret
	if	Offset
	ds	4,0
	endif
RamPrgEnd:

Title:
	include	"./RCM Title.asm"
; Give your Rom compilation a title. It will be displayed at the top of the screen just above the list of Roms
; You must respect the number of characters between quotation marks which is 40

	db	"              SEGA PACK              "
     
Characters:
	include	"./fonts/custom.asm"

    DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,0x42,0xa5,0x81,0xa5,0x99,0x42,0x3c
    DB 0x3c,0x7e,0xdb,0xff,0xff,0xdb,0x66,0x3c,0x6c,0xfe,0xfe,0xfe,0x7c,0x38,0x10,0x00
    DB 0x10,0x38,0x7c,0xfe,0x7c,0x38,0x10,0x00,0x10,0x38,0x54,0xfe,0x54,0x10,0x38,0x00
    DB 0x10,0x38,0x7c,0xfe,0xfe,0x10,0x38,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00
    DB 0xff,0xff,0xff,0xe7,0xe7,0xff,0xff,0xff,0x38,0x44,0x82,0x82,0x82,0x44,0x38,0x00
    DB 0xc7,0xbb,0x7d,0x7d,0x7d,0xbb,0xc7,0xff,0x0f,0x03,0x05,0x79,0x88,0x88,0x88,0x70
    DB 0x38,0x44,0x44,0x44,0x38,0x10,0x7c,0x10,0x30,0x28,0x24,0x24,0x28,0x20,0xe0,0xc0
    DB 0x3c,0x24,0x3c,0x24,0x24,0xe4,0xdc,0x18,0x10,0x54,0x38,0xee,0x38,0x54,0x10,0x00
    DB 0x10,0x10,0x10,0x7c,0x10,0x10,0x10,0x10,0x3c,0x7c,0x60,0x38,0x0c,0x7c,0xf8,0x00
    DB 0xa8,0x7c,0xfc,0xd4,0xd4,0xc4,0xc4,0x00,0x44,0x6c,0xb8,0x90,0xb8,0xec,0xc4,0x00
    DB 0x30,0x30,0x6c,0xcc,0xd8,0x30,0x30,0x00,0x10,0x10,0x10,0xff,0x10,0x10,0x10,0x10
    DB 0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00
    DB 0x00,0x00,0x00,0x1f,0x10,0x10,0x10,0x10,0x00,0x00,0x00,0xf0,0x10,0x10,0x10,0x10
    DB 0x10,0x10,0x10,0x1f,0x00,0x00,0x00,0x00,0x10,0x10,0x10,0xf0,0x00,0x00,0x00,0x00
    DB 0x81,0x42,0x24,0x18,0x18,0x24,0x42,0x81,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80
    DB 0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff
    DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x20,0x20,0x00,0x00,0x20,0x00
    DB 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x50,0x50,0xf8,0x50,0xf8,0x50,0x50,0x00
    DB 0x20,0x78,0xa0,0x70,0x28,0xf0,0x20,0x00,0xc0,0xc8,0x10,0x20,0x40,0x98,0x18,0x00
    DB 0x40,0xa0,0x40,0xa8,0x90,0x98,0x60,0x00,0x10,0x20,0x40,0x00,0x00,0x00,0x00,0x00
    DB 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00,0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00
    DB 0x20,0xa8,0x70,0x20,0x70,0xa8,0x20,0x00,0x1c,0x38,0x78,0x78,0x78,0x38,0x1c,0x00
    DB 0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x40,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x00
    DB 0xfc,0x38,0xf0,0x38,0xf8,0xf0,0xfc,0x00,0xe0,0xf0,0xf8,0xf8,0xf8,0x70,0xe0,0x00
    DB 0x70,0x88,0x98,0xa8,0xc8,0x88,0x70,0x00,0x20,0x60,0xa0,0x20,0x20,0x20,0xf0,0x00
    DB 0x70,0x88,0x08,0x10,0x60,0x80,0xf8,0x00,0x70,0x88,0x08,0x30,0x08,0x88,0x70,0x00
    DB 0x10,0x30,0x50,0x90,0xf8,0x10,0x10,0x00,0xf8,0x80,0xe0,0x10,0x08,0x10,0xe0,0x00
    DB 0x30,0x40,0x80,0xf0,0x88,0x88,0x70,0x00,0xf8,0x88,0x10,0x20,0x20,0x20,0x20,0x00
    DB 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00,0x70,0x88,0x88,0x78,0x08,0x10,0x60,0x00
    DB 0x00,0x00,0x20,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x20,0x20,0x40
    DB 0x18,0x30,0x60,0xc0,0x60,0x30,0x18,0x00,0x00,0x00,0xf8,0x00,0xf8,0x00,0x00,0x00
    DB 0xc0,0xe0,0xf0,0xf8,0xf0,0xe0,0xc0,0x00,0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00
    DB 0x70,0x88,0x08,0x48,0xa8,0xa8,0x70,0x00,0x20,0x50,0x88,0x88,0xf8,0x88,0x88,0x00
    DB 0xf0,0x88,0x88,0xf0,0x88,0x88,0xf0,0x00,0x30,0x48,0x80,0x80,0x80,0x48,0x30,0x00
    DB 0xe0,0x90,0x88,0x88,0x88,0x90,0xe0,0x00,0xf8,0x80,0x80,0xf0,0x80,0x80,0xf8,0x00
    DB 0xf8,0x80,0x80,0xf0,0x80,0x80,0x80,0x00,0x70,0x88,0x80,0xb8,0x88,0x88,0x70,0x00
    DB 0x88,0x88,0x88,0xf8,0x88,0x88,0x88,0x00,0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00
    DB 0x38,0x10,0x10,0x10,0x90,0x90,0x60,0x00,0x88,0x90,0xa0,0xc0,0xa0,0x90,0x88,0x00
    DB 0x80,0x80,0x80,0x80,0x80,0x80,0xf8,0x00,0x88,0xd8,0xa8,0xa8,0x88,0x88,0x88,0x00
    DB 0x88,0xc8,0xc8,0xa8,0x98,0x98,0x88,0x00,0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00
    DB 0xf0,0x88,0x88,0xf0,0x80,0x80,0x80,0x00,0x70,0x88,0x88,0x88,0xa8,0x90,0x68,0x00
    DB 0xf0,0x88,0x88,0xf0,0xa0,0x90,0x88,0x00,0x70,0x88,0x80,0x70,0x08,0x88,0x70,0x00
    DB 0xf8,0x20,0x20,0x20,0x20,0x20,0x20,0x00,0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00
    DB 0x88,0x88,0x88,0x88,0x50,0x50,0x20,0x00,0x88,0x88,0x88,0xa8,0xa8,0xd8,0x88,0x00
    DB 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00,0x88,0x88,0x88,0x70,0x20,0x20,0x20,0x00
    DB 0xf8,0x08,0x10,0x20,0x40,0x80,0xf8,0x00,0x70,0x40,0x40,0x40,0x40,0x40,0x70,0x00
    DB 0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x70,0x00
    DB 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x00
    DB 0x80,0x40,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00
    DB 0x80,0x80,0xb0,0xc8,0x88,0xc8,0xb0,0x00,0x00,0x00,0x70,0x88,0x80,0x88,0x70,0x00
    DB 0x08,0x08,0x68,0x98,0x88,0x98,0x68,0x00,0x00,0x00,0x70,0x88,0xf8,0x80,0x70,0x00
    DB 0x10,0x28,0x20,0xf8,0x20,0x20,0x20,0x00,0x00,0x00,0x68,0x98,0x98,0x68,0x08,0x70
    DB 0x80,0x80,0xf0,0x88,0x88,0x88,0x88,0x00,0x20,0x00,0x60,0x20,0x20,0x20,0x70,0x00
    DB 0x10,0x00,0x30,0x10,0x10,0x10,0x90,0x60,0x40,0x40,0x48,0x50,0x60,0x50,0x48,0x00
    DB 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00,0x00,0x00,0xd0,0xa8,0xa8,0xa8,0xa8,0x00
    DB 0x00,0x00,0xb0,0xc8,0x88,0x88,0x88,0x00,0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00
    DB 0x00,0x00,0xb0,0xc8,0xc8,0xb0,0x80,0x80,0x00,0x00,0x68,0x98,0x98,0x68,0x08,0x08
    DB 0x00,0x00,0xb0,0xc8,0x80,0x80,0x80,0x00,0x00,0x00,0x78,0x80,0x70,0x08,0xf0,0x00
    DB 0x40,0x40,0xf0,0x40,0x40,0x48,0x30,0x00,0x00,0x00,0x90,0x90,0x90,0x90,0x68,0x00
    DB 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00,0x00,0x00,0x88,0xa8,0xa8,0xa8,0x50,0x00
    DB 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00,0x00,0x00,0x88,0x88,0x98,0x68,0x08,0x70
    DB 0x00,0x00,0xf8,0x10,0x20,0x40,0xf8,0x00,0x18,0x20,0x20,0x40,0x20,0x20,0x18,0x00
    DB 0x20,0x20,0x20,0x00,0x20,0x20,0x20,0x00,0xc0,0x20,0x20,0x10,0x20,0x20,0xc0,0x00
    DB 0x40,0xa8,0x10,0x00,0x00,0x00,0x00,0x00,0xc0,0xe0,0xf0,0xf8,0xf0,0xe0,0xc0,0x00
    DB 0x30,0x48,0x80,0x80,0x80,0x48,0x30,0x60,0x50,0x00,0x90,0x90,0x90,0x90,0x68,0x00
    DB 0x10,0x20,0x70,0x88,0xf8,0x80,0x70,0x00,0x20,0x50,0x70,0x08,0x78,0x88,0x78,0x00
    DB 0x10,0x20,0x20,0x50,0x88,0xf8,0x88,0x00,0x40,0x20,0x70,0x08,0x78,0x88,0x78,0x00
    DB 0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x88,0x80,0x88,0x70,0x20
    DB 0x20,0x50,0x70,0xa8,0xf8,0x80,0x70,0x00,0x10,0x20,0x70,0x20,0x20,0x20,0x70,0x00
    DB 0x10,0x20,0x70,0x88,0x88,0x88,0x70,0x00,0x10,0x20,0x88,0x88,0x88,0x88,0x70,0x00
    DB 0x20,0x50,0x20,0x50,0x88,0xf8,0x88,0x00,0x20,0x50,0xf8,0x80,0xf0,0x80,0xf8,0x00
    DB 0x20,0x50,0x70,0x88,0x88,0x88,0x70,0x00,0x40,0x20,0x20,0x50,0x88,0xf8,0x88,0x00
    DB 0x10,0x20,0xf8,0x80,0xf0,0x80,0xf8,0x00,0x00,0x00,0x6c,0x12,0x7e,0x90,0x6e,0x00
    DB 0x3e,0x50,0x90,0x9c,0xf0,0x90,0x9e,0x00,0x20,0x50,0x70,0x88,0x88,0x88,0x70,0x00
    DB 0x50,0x00,0x70,0x88,0x88,0x88,0x70,0x00,0x40,0x20,0x70,0x88,0x88,0x88,0x70,0x00
    DB 0x20,0x50,0x00,0x90,0x90,0x90,0x68,0x00,0x40,0x20,0x00,0x90,0x90,0x90,0x68,0x00
    DB 0x50,0x00,0x88,0x88,0x98,0x68,0x08,0x70,0x50,0x00,0x70,0x88,0x88,0x88,0x70,0x00
    DB 0x50,0x00,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x20,0x78,0x80,0x80,0x78,0x20,0x20
    DB 0x18,0x24,0x20,0xf8,0x20,0xe2,0x5c,0x00,0x88,0x50,0x20,0xf8,0x20,0xf8,0x20,0x00
    DB 0x60,0x80,0x9c,0x84,0x88,0x90,0x7c,0x00,0x18,0x20,0x20,0xf8,0x20,0x20,0x20,0x40
    DB 0x10,0x20,0x70,0x08,0x78,0x88,0x78,0x00,0x10,0x20,0x00,0x60,0x20,0x20,0x70,0x00
    DB 0x10,0x20,0x70,0x88,0x88,0x88,0x70,0x00,0x10,0x20,0x90,0x90,0x90,0x90,0x68,0x00
    DB 0x28,0x50,0xb0,0xc8,0x88,0x88,0x88,0x00,0x28,0x50,0x88,0xc8,0xa8,0x98,0x88,0x00
    DB 0x60,0x90,0x90,0x68,0x00,0xf8,0x00,0x00,0x60,0x90,0x90,0x60,0x00,0xf0,0x00,0x00
    DB 0x20,0x00,0x20,0x40,0x80,0x88,0x70,0x00,0x00,0x00,0x00,0xf8,0x80,0x80,0x00,0x00
    DB 0x00,0x00,0x00,0xf8,0x08,0x08,0x00,0x00,0x84,0x88,0x90,0xa8,0x54,0x84,0x08,0x1c
    DB 0x84,0x88,0x90,0xa8,0x58,0xa8,0x3c,0x08,0x20,0x00,0x00,0x20,0x20,0x20,0x20,0x00
    DB 0x00,0x12,0x24,0x48,0x90,0x48,0x24,0x12,0x00,0x90,0x48,0x24,0x12,0x24,0x48,0x90
    DB 0x28,0x50,0x20,0x50,0x88,0xf8,0x88,0x00,0x28,0x50,0x70,0x08,0x78,0x88,0x78,0x00
    DB 0x28,0x50,0x00,0x70,0x20,0x20,0x70,0x00,0x28,0x50,0x00,0x20,0x20,0x20,0x70,0x00
    DB 0x28,0x50,0x70,0x88,0x88,0x88,0x70,0x00,0x28,0x50,0x70,0x88,0x88,0x88,0x70,0x00
    DB 0x28,0x50,0x00,0x88,0x88,0x88,0x70,0x00,0x28,0x50,0x00,0x90,0x90,0x90,0x68,0x00
    DB 0xfc,0x48,0x48,0x48,0xe8,0x08,0x50,0x20,0x00,0xa0,0x00,0xa0,0xa0,0xa0,0x20,0x40
    DB 0xc0,0x44,0xc8,0x54,0xec,0x54,0x9e,0x04,0x10,0xa8,0x40,0x00,0x00,0x00,0x00,0x00
    DB 0x00,0x20,0x50,0x88,0x50,0x20,0x00,0x00,0xc4,0xc8,0x10,0x20,0x40,0xb6,0x36,0x00
    DB 0x7c,0xa8,0xa8,0x68,0x28,0x28,0x28,0x00,0x38,0x40,0x30,0x48,0x48,0x30,0x08,0x70
    DB 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0x0f,0x0f
    DB 0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00
    DB 0x00,0x00,0x00,0x3c,0x3c,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00
    DB 0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0x0f,0x0f,0x0f,0x0f,0xf0,0xf0,0xf0,0xf0
    DB 0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03
    DB 0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x11,0x22,0x44,0x88,0x11,0x22,0x44,0x88
    DB 0x88,0x44,0x22,0x11,0x88,0x44,0x22,0x11,0xfe,0x7c,0x38,0x10,0x00,0x00,0x00,0x00
    DB 0x00,0x00,0x00,0x00,0x10,0x38,0x7c,0xfe,0x80,0xc0,0xe0,0xf0,0xe0,0xc0,0x80,0x00
    DB 0x01,0x03,0x07,0x0f,0x07,0x03,0x01,0x00,0xff,0x7e,0x3c,0x18,0x18,0x3c,0x7e,0xff
    DB 0x81,0xc3,0xe7,0xff,0xff,0xe7,0xc3,0x81,0xf0,0xf0,0xf0,0xf0,0x00,0x00,0x00,0x00
    DB 0x00,0x00,0x00,0x00,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x00,0x00,0x00,0x00
    DB 0x00,0x00,0x00,0x00,0xf0,0xf0,0xf0,0xf0,0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc
    DB 0x00,0x20,0x20,0x50,0x50,0x88,0xf8,0x00,0x20,0x20,0x70,0x20,0x70,0x20,0x20,0x00
    DB 0x00,0x00,0x00,0x50,0x88,0xa8,0x50,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
    DB 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0
    DB 0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00
    DB 0x00,0x00,0x68,0x90,0x90,0x90,0x68,0x00,0x30,0x48,0x48,0x70,0x48,0x48,0x70,0xc0
    DB 0xf8,0x88,0x80,0x80,0x80,0x80,0x80,0x00,0xf8,0x50,0x50,0x50,0x50,0x50,0x98,0x00
    DB 0xf8,0x88,0x40,0x20,0x40,0x88,0xf8,0x00,0x00,0x00,0x78,0x90,0x90,0x90,0x60,0x00
    DB 0x00,0x50,0x50,0x50,0x50,0x68,0x80,0x80,0x00,0x50,0xa0,0x20,0x20,0x20,0x20,0x00
    DB 0xf8,0x20,0x70,0xa8,0xa8,0x70,0x20,0xf8,0x20,0x50,0x88,0xf8,0x88,0x50,0x20,0x00
    DB 0x70,0x88,0x88,0x88,0x50,0x50,0xd8,0x00,0x30,0x40,0x40,0x20,0x50,0x50,0x50,0x20
    DB 0x00,0x00,0x00,0x50,0xa8,0xa8,0x50,0x00,0x1c,0x38,0x78,0x78,0x78,0x38,0x1c,0x00
    DB 0xfe,0x3a,0xf2,0x3a,0xfa,0xf0,0xfe,0x00,0x70,0x88,0x88,0x88,0x88,0x88,0x88,0x00
    DB 0x00,0x00,0xf0,0x00,0xf0,0x00,0xf0,0x00,0x20,0x20,0xf8,0x20,0x20,0x00,0xf8,0x00
    DB 0xc0,0x30,0x08,0x30,0xc0,0x00,0xf8,0x00,0x18,0x60,0x80,0x60,0x18,0x00,0xf8,0x00
    DB 0x10,0x28,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xa0,0x40
    DB 0x00,0x20,0x00,0xf8,0x00,0x20,0x00,0x00,0x00,0x50,0xa0,0x00,0x50,0xa0,0x00,0x00
    DB 0x00,0x18,0x24,0x24,0x18,0x00,0x00,0x00,0x00,0x30,0x78,0x78,0x30,0x00,0x00,0x00
    DB 0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x3e,0x20,0x20,0x20,0xa0,0x60,0x20,0x00
    DB 0xa0,0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x40,0xa0,0x20,0x40,0xe0,0x00,0x00,0x00
    DB 0x00,0x38,0x38,0x38,0x38,0x38,0x38,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
EmptyLine:
	db	"                                        "
SeparatorTopLine:
	db	TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS,TS
SeparatorBottomLine:
	db	BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS,BS
F1_50Hz:
	db	" ", 11h, 12h, 13h, " Team                 ",2Bh, 2Eh, 2Fh," 50Hz mode "
F1_60Hz:
	db	" ", 11h, 12h, 13h, " Team                 ",2Bh, 2Eh, 2Fh," 60Hz mode "
SMXTeam:
	db	"                ", 11h, 12h, 13h, " Team                "

; RomList format is: ROM segment, MSX generation, "Rom name"

RomList:
	ds	LineData*6,0
	include	"./Build/EditThisList.asm"
	db	2, 0, "     BANK PANIC                         "
	db	6, 0, "     BOMB JACK                          "
	db	10, 0, "     BUCK ROGERS - PLANET OF ZOOM       "
	db	14, 0, "     CONGO BONGO                        "
	db	18, 0, "     CHAMPION BILLIARD                  "
	db	22, 0, "     CHAMPION BOXING                    "
	db	26, 0, "     CHAMPION ICE HOCKEY                "
	db	30, 0, "     CHAMPION PRO WRESTLING             "
	db	34, 0, "     CHAMPION SOCCER                    "
	db	36, 0, "     CHAMPIONSHIP KENDO                 "
	db	40, 0, "     DOKI DOKI PENGUIN LAND             "
	db	44, 0, "     GP WORLD                           "
	db	48, 0, "     GULKAVE                            "
	db	52, 0, "     HANG-ON                            "
	db	56, 0, "     ORGUSS                             "
	db	60, 0, "     STAR TREK STRATEGIC OPERATIONS SIMU"
	db	64, 0, "     ZAXXON                             "
	db	68, 128, "     ZOOM 909                           "
	db	72, 129, "     ZZOUTRUN-2                         "
	db	104, 255, "                                        " ; Do not modify this line
	ds	LineData*20,0

EndList:
	ds	02000h-(EndList-04000h),255

; Empty header on the segment 1 to run the Roms that contains a Basic program

	ds	10h,0

; Fill the rest of segment 1 with 255

	ds	01FF0h,255
	




; +++ segments +++

#CODE          = $4000 = 16384,  size = $4000 = 16384

; +++ global symbols +++

AD6000              = $43E2 = 17378          RCM Menu v2.asm:731 (unused)
AD7000              = $43F1 = 17393          RCM Menu v2.asm:746 (unused)
BAKCLR              = $F3EA = 62442          RCM Menu v2.asm:47
BASRVN              = $002B =    43          RCM Menu v2.asm:19
BDRCLR              = $F3EB = 62443          RCM Menu v2.asm:48
BS                  = $0017 =    23          RCM Menu v2.asm:11
BS_POS              = $0016 =    22          RCM Menu v2.asm:12
BankSel             = $43B2 = 17330          RCM Menu v2.asm:673
Bk5000              = $43B2 = 17330          RCM Menu v2.asm:675 (unused)
Bk7000              = $43BE = 17342          RCM Menu v2.asm:689 (unused)
Bk9000              = $43CA = 17354          RCM Menu v2.asm:703 (unused)
BkB000              = $43D6 = 17366          RCM Menu v2.asm:717 (unused)
CHAR_SELECTOR       = $003E =    62          RCM Menu v2.asm:7
CHGET               = $009F =   159          RCM Menu v2.asm:40 (unused)
CHGMOD              = $005F =    95          RCM Menu v2.asm:39 (unused)
CHPUT               = $00A2 =   162          RCM Menu v2.asm:38 (unused)
CONT                = $41B4 = 16820          RCM Menu v2.asm:350 (unused)
Characters          = $4425 = 17445          RCM Menu v2.asm:765
CurrAdr             = $E171 = 57713          RCM Menu v2.asm:72
CurrFreq            = $40C6 = 16582          RCM Menu v2.asm:204
CurrTopName         = $E169 = 57705          RCM Menu v2.asm:66
DISSCR              = $0041 =    65          RCM Menu v2.asm:20 (unused)
DSPFNK              = $00CF =   207          RCM Menu v2.asm:42 (unused)
ENASCR              = $0044 =    68          RCM Menu v2.asm:21 (unused)
ENASLT              = $0024 =    36          RCM Menu v2.asm:22
ERAFNK              = $00CC =   204          RCM Menu v2.asm:41 (unused)
EXPTBL              = $FCC1 = 64705          RCM Menu v2.asm:53
EmptyLine           = $4C25 = 19493          RCM Menu v2.asm:767 (unused)
EndList             = $54A1 = 21665          RCM Menu v2.asm:787
ExeByJump           = $43A2 = 17314          RCM Menu v2.asm:656
ExeByRet            = $43AB = 17323          RCM Menu v2.asm:662
F1_50Hz             = $4C9D = 19613          RCM Menu v2.asm:773
F1_60Hz             = $4CC5 = 19653          RCM Menu v2.asm:775
FILVRM              = $0056 =    86          RCM Menu v2.asm:23 (unused)
FNKSB               = $00C9 =   201          RCM Menu v2.asm:43 (unused)
FORCLR              = $F3E9 = 62441          RCM Menu v2.asm:49
FREQ_POS            = $0017 =    23          RCM Menu v2.asm:13
FreqTogglJ          = $4145 = 16709          RCM Menu v2.asm:280
FreqToggle          = $4155 = 16725          RCM Menu v2.asm:291
GTSTCK              = $00D5 =   213          RCM Menu v2.asm:26
GTTRIG              = $00D8 =   216          RCM Menu v2.asm:27
H_STKE              = $FEDA = 65242          RCM Menu v2.asm:59 (unused)
INIT32              = $006F =   111          RCM Menu v2.asm:25
INITXT              = $006C =   108          RCM Menu v2.asm:24
LDIRVM              = $005C =    92          RCM Menu v2.asm:28
LINL40              = $F3AE = 62382          RCM Menu v2.asm:50
LIST_VIEW_SIZE      = $0014 =    20          RCM Menu v2.asm:14
LineData            = $002A =    42          RCM Menu v2.asm:75
MSXVER              = $002D =    45          RCM Menu v2.asm:29
MainLoop            = $40E0 = 16608          RCM Menu v2.asm:220
MainPrgEnd          = $43B2 = 17330          RCM Menu v2.asm:668
MoveDown            = $41A1 = 16801          RCM Menu v2.asm:337
MoveUp              = $41C7 = 16839          RCM Menu v2.asm:364
NEWKEY              = $FBE5 = 64485          RCM Menu v2.asm:52
NextMSXgen          = $408C = 16524          RCM Menu v2.asm:169
NextName            = $41BC = 16828          RCM Menu v2.asm:357
NextSegMum          = $E16F = 57711          RCM Menu v2.asm:70
NoScreen1           = $4269 = 17001          RCM Menu v2.asm:475
NoUPTO8000          = $42FE = 17150          RCM Menu v2.asm:562
Offset              = $0001 =     1          RCM Menu v2.asm:77
OffsetReg           = $3FFF = 16383          RCM Menu v2.asm:81
PlainRom8to16K      = $427B = 17019          RCM Menu v2.asm:484 (unused)
PrevName            = $41D1 = 16849          RCM Menu v2.asm:372 (unused)
PrgInRam            = $E010 = 57360          RCM Menu v2.asm:65
PrintFreqOpt        = $4179 = 16761          RCM Menu v2.asm:312
PrintList           = $41DE = 16862          RCM Menu v2.asm:380
PrintListLP         = $41E3 = 16867          RCM Menu v2.asm:384
PrintName           = $4246 = 16966          RCM Menu v2.asm:449 (unused)
PrintOK             = $41F5 = 16885          RCM Menu v2.asm:399
PrintTopSeparator   = $40CF = 16591          RCM Menu v2.asm:210 (unused)
PrnCond             = $41E5 = 16869          RCM Menu v2.asm:387
PutOnpages1_2_3     = $4366 = 17254          RCM Menu v2.asm:624
RG9SAV              = $FFE8 = 65512          RCM Menu v2.asm:54
RSLREG              = $0138 =   312          RCM Menu v2.asm:30
RamBottom           = $E000 = 57344          RCM Menu v2.asm:64
RamPrgEnd           = $4400 = 17408          RCM Menu v2.asm:761
Rom2page0           = $432A = 17194          RCM Menu v2.asm:592
Rom2page1           = $4299 = 17049          RCM Menu v2.asm:501 (unused)
Rom2page2           = $4304 = 17156          RCM Menu v2.asm:570
Rom2pages1_2        = $42BB = 17083          RCM Menu v2.asm:519
Rom2pages1_2_3      = $4350 = 17232          RCM Menu v2.asm:614
RomExec             = $4189 = 16777          RCM Menu v2.asm:322
RomList             = $4D15 = 19733          RCM Menu v2.asm:782
RomSel              = $4259 = 16985          RCM Menu v2.asm:464
RomSize             = $E173 = 57715          RCM Menu v2.asm:73
RomSlot             = $E170 = 57712          RCM Menu v2.asm:71
SELECTOR_POS        = $0008 =     8          RCM Menu v2.asm:8
SMXTeam             = $4CED = 19693          RCM Menu v2.asm:777
START_LIST          = $0002 =     2          RCM Menu v2.asm:15
SegMum              = $E16E = 57710          RCM Menu v2.asm:69
SeparatorBottomLine = $4C75 = 19573          RCM Menu v2.asm:771
SeparatorTopLine    = $4C4D = 19533          RCM Menu v2.asm:769
SetVDPReg           = $4250 = 16976          RCM Menu v2.asm:457 (unused)
SettingBits         = $E16D = 57709          RCM Menu v2.asm:68
SkipSegMum          = $4214 = 16916          RCM Menu v2.asm:417
Start               = $4010 = 16400          RCM Menu v2.asm:96
TS                  = $0017 =    23          RCM Menu v2.asm:9
TS_POS              = $0001 =     1          RCM Menu v2.asm:10
TXTATR              = $F3B9 = 62393          RCM Menu v2.asm:51
Title               = $4400 = 17408          RCM Menu v2.asm:763
VDP_DR              = $0006 =     6          RCM Menu v2.asm:31 (unused)
VDP_DW              = $0007 =     7          RCM Menu v2.asm:32 (unused)
VOICAQ              = $F975 = 63861          RCM Menu v2.asm:55
VramPos             = $E16B = 57707          RCM Menu v2.asm:67
WRSLT               = $0014 =    20          RCM Menu v2.asm:33
WRTVDP              = $0047 =    71          RCM Menu v2.asm:34
WRTVRM              = $004D =    77          RCM Menu v2.asm:35
WidthName           = $0028 =    40          RCM Menu v2.asm:74
_end                = $8000 = 32768          RCM Menu v2.asm:86 (unused)
_size               = $4000 = 16384          RCM Menu v2.asm:86 (unused)


total time: 0.0217 sec.
no errors
